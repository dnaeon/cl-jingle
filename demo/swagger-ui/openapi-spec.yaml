openapi: 3.0.3
info:
  title: Common Lisp jingle demo
  description: |-
    A simple demo of the Common Lisp JINGLE system.
    Checkout the [dnaeon/jingle repo](https://github.com/dnaeon/cl-jingle) at Github for more details.
  contact:
    email: dnaeon@gmail.com
  license:
    name: BSD 2-Clause
    url: https://opensource.org/licenses/BSD-2-Clause
  version: 0.1.0
tags:
  - name: health
    description: Health-check related API endpoints
  - name: product
    description: Product-related API endpoints
paths:
  /api/v1/ping:
    get:
      tags:
        - health
      summary: Send a ping request to the API
      description: Send a ping request to the API
      operationId: ping
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
  /api/v1/product:
    get:
      tags:
        - product
      summary: Get a page of products
      description: Get a page of products
      operationId: getProductsPage
      parameters:
        - name: from
          in: query
          description: Fetch products starting from this offset
          required: false
          schema:
            type: integer
            format: int64
            default: 0
        - name: to
          in: query
          description: Fetch products up to this offset
          required: false
          schema:
            type: integer
            format: int64
            default: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - product
      summary: Create new product
      description: Create new product
      operationId: createNewProduct
      requestBody:
        description: Product to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/product/{id}:
    get:
      tags:
        - product
      summary: Get a product by id
      description: Get a product by id
      operationId: findProductById
      parameters:
        - name: id
          in: path
          description: ID of product to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
        - product
      summary: Delete a product by id
      description: Delete a product by id
      operationId: deleteProductById
      parameters:
        - name: id
          in: path
          description: ID of product to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    Pong:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
        message:
          type: string
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ApiError:
      type: object
      properties:
        message:
          type: string
    NewProduct:
      type: object
      properties:
        name:
          type: string
